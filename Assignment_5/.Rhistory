# Loading necessary libraries
library(tidyverse)  # For data manipulation
library(cluster)    # For hierarchical clustering
# Loading the dataset
cereals <- read.csv("~/Downloads/Cereals (2).csv")
View(cereals)
str(cereals)
summary(cereals)
# Removing rows with missing values
cereals_new <- na.omit(cereals)
# Identifying numeric columns (excluding known non-numeric columns more dynamically)
numeric_col <- sapply(cereals_new, is.numeric)
# Applying normalization only on numeric columns
cereals_normalized <- as.data.frame(lapply(cereals_new[,numeric_col], normalize_data))
normalize_data <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
# Identifying numeric columns (excluding known non-numeric columns more dynamically)
numeric_col <- sapply(cereals_new, is.numeric)
# Applying normalization only on numeric columns
cereals_normalized <- as.data.frame(lapply(cereals_new[,numeric_col], normalize_data))
# Hierarchical clustering with different linkage methods
hc_single <- agnes(cereals_normalized, method = "single")
hc_complete <- agnes(cereals_normalized, method = "complete")
hc_average <- agnes(cereals_normalized, method = "average")
hc_ward <- agnes(cereals_normalized, method = "ward")
# Ploting dendrograms to visualize the clustering
par(mfrow=c(2,2))  # Arrange plots in a 2x2 grid
plot(hc_single, main = "Single Linkage",which.plots = 2)
normalize_data <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
# Identifying numeric columns (excluding known non-numeric columns more dynamically)
numeric_col <- sapply(cereals_new, is.numeric)
# Applying normalization only on numeric columns
cereals_normalized <- as.data.frame(lapply(cereals_new[,numeric_col], normalize_data))
# Hierarchical clustering with different linkage methods
hc_single <- agnes(cereals_normalized, method = "single")
hc_complete <- agnes(cereals_normalized, method = "complete")
hc_average <- agnes(cereals_normalized, method = "average")
hc_ward <- agnes(cereals_normalized, method = "ward")
# Ploting dendrograms to visualize the clustering
par(mfrow=c(2,2))  # Arrange plots in a 2x2 grid
plot(hc_single, main = "Single Linkage",which.plots = 2)
plot(hc_complete, main = "Complete Linkage",which.plots = 2)
plot(hc_average, main = "Average Linkage",which.plots = 2)
plot(hc_ward, main = "Ward's Method",which.plots = 2)
normalize_data <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
# Identifying numeric columns (excluding known non-numeric columns more dynamically)
numeric_col <- sapply(cereals_new, is.numeric)
# Applying normalization only on numeric columns
cereals_normalized <- as.data.frame(lapply(cereals_new[,numeric_col], normalize_data))
# Hierarchical clustering with different linkage methods
hc_single <- agnes(cereals_normalized, method = "single")
hc_complete <- agnes(cereals_normalized, method = "complete")
hc_average <- agnes(cereals_normalized, method = "average")
hc_ward <- agnes(cereals_normalized, method = "ward")
# Ploting dendrograms to visualize the clustering
par(mfrow=c(2,2))  # Arrange plots in a 2x2 grid
plot(hc_single, main = "Single Linkage",which.plots = 2)
plot(hc_complete, main = "Complete Linkage",which.plots = 2)
plot(hc_average, main = "Average Linkage",which.plots = 2)
plot(hc_ward, main = "Ward's Method",which.plots = 2)
normalize_data <- function(x) {(x - min(x)) / (max(x) - min(x))}
# Identifying numeric columns (excluding known non-numeric columns more dynamically)
numeric_col <- sapply(cereals_new, is.numeric)
# Applying normalization only on numeric columns
cereals_normalized <- as.data.frame(lapply(cereals_new[,numeric_col], normalize_data))
# Hierarchical clustering with different linkage methods
hc_single <- agnes(cereals_normalized, method = "single")
hc_complete <- agnes(cereals_normalized, method = "complete")
hc_average <- agnes(cereals_normalized, method = "average")
hc_ward <- agnes(cereals_normalized, method = "ward")
# Ploting dendrograms to visualize the clustering
par(mfrow=c(2,2))  # Arrange plots in a 2x2 grid
plot(hc_single, main = "Single Linkage",which.plots = 2)
plot(hc_complete, main = "Complete Linkage",which.plots = 2)
plot(hc_average, main = "Average Linkage",which.plots = 2)
plot(hc_ward, main = "Ward's Method",which.plots = 2)
set.seed(42)  # for reproducibility
partition_data <- sample(nrow(cereals_normalized))
partition_A <- cereals_norm[partition_data[1:(length(partition_data) / 2)], ]
set.seed(42)  # for reproducibility
partition_data <- sample(nrow(cereals_normalized))
partition_A <- cereals_normalized[partition_data[1:(length(partition_data) / 2)], ]
partition_B <- cereals_normalized[partition_data[(length(partition_data) / 2 + 1):length(partition_data)], ]
# Clustering partition A
hc_A <- agnes(partition_A, method = "ward")
clusters_A <- cutree(as.hclust(hc_A), k = 4)
# Calculating centroids of clusters in partition A
centroids_A <- aggregate(partition_A, by=list(clusters_A), FUN=mean)
centroids_A <- centroids_A[, -1]
# Assigning clusters to partition B
assign_clusters_B <- function(row, centroids) {
distances <- apply(centroids, 1, function(centroid) sum((row - centroid)^2))
return(which.min(distances))
}
clusters_B <- apply(partition_B, 1, function(row) assign_clusters_B(row, centroids_A))
# Performing clustering on the entire dataset to get the 'true' cluster assignments
hc_full <- agnes(cereals_normalized, method = "ward")
clusters_full <- cutree(as.hclust(hc_full), k = 4)
# Comparing the cluster assignments for partition B from the centroids of A to the full dataset
consistency_matrix <- table(Partition_B = clusters_B, Full_Data = clusters_full[partition_data[(length(partition_data) / 2 + 1):length(partition_data)]])
print(consistency_matrix)
# We can calculate a measure of consistency by comparing the assignments.
# For example, a simple consistency score can be the sum of the diagonal of the consistency matrix
# divided by the total number of observations in partition B.
consistency_score <- sum(diag(consistency_matrix)) / nrow(partition_B)
print(paste("Consistency score:", consistency_score))
hc_final <- agnes(cereals_normalized, method = "ward")
final_clusters <- cutree(as.hclust(hc_final), k = 4)
# Computing centroids of the clusters
centroids <- aggregate(cereals_normalized, by=list(final_clusters), FUN=mean)
centroids <- centroids[, -1]
# Defining the criteria for "healthy cereals" based on nutritional information
healthy_index <- which(
centroids$fiber == max(centroids$fiber) &
centroids$sugar == min(centroids$sugars) &
centroids$sat_fat == min(centroids$fat) &
centroids$vitamins == max(centroids$vitamins) &
centroids$protein == max(centroids$protein)
)
# Scoring each cluster based on health criteria
health_scores <- centroids$fiber / max(centroids$fiber) +
(max(centroids$sugars) - centroids$sugars) / max(centroids$sugars) +
(max(centroids$fat) - centroids$fat) / max(centroids$fat) +
centroids$vitamins / max(centroids$vitamins) +
centroids$protein / max(centroids$protein)
# Selecting the index of the cluster with the highest health score
healthy_index <- which.max(health_scores)
# Extracting the centroid for the healthiest cluster
healthy_cluster <- centroids[healthy_index, ]
print(healthy_cluster)
